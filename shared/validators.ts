import { z } from "zod";
import { insertUserSchema, insertFirSchema, insertStatusUpdateSchema, insertEvidenceSchema, insertNotificationSchema } from "./schema";

// User registration validator
export const createUserValidator = insertUserSchema.extend({
  email: z.string().email("Please enter a valid email address"),
  password: z
    .string()
    .min(8, "Password must be at least 8 characters long")
    .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
    .regex(/[a-z]/, "Password must contain at least one lowercase letter")
    .regex(/[0-9]/, "Password must contain at least one number"),
  confirmPassword: z.string(),
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

// Login validator
export const loginValidator = z.object({
  username: z.string().min(1, "Username is required"),
  password: z.string().min(1, "Password is required"),
});

// Profile update validator
export const updateProfileValidator = z.object({
  fullName: z.string().min(2, "Full name must be at least 2 characters").optional(),
  phone: z.string().regex(/^\+?[0-9]{10,15}$/, "Please enter a valid phone number").optional(),
  address: z.string().optional(),
  preferences: z.record(z.unknown()).optional(),
});

// Password change validator
export const changePasswordValidator = z.object({
  currentPassword: z.string().min(1, "Current password is required"),
  newPassword: z
    .string()
    .min(8, "Password must be at least 8 characters long")
    .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
    .regex(/[a-z]/, "Password must contain at least one lowercase letter")
    .regex(/[0-9]/, "Password must contain at least one number"),
  confirmNewPassword: z.string().min(1, "Please confirm your new password"),
}).refine(data => data.newPassword === data.confirmNewPassword, {
  message: "Passwords don't match",
  path: ["confirmNewPassword"],
});

// Extended FIR creation validator
export const createFirValidator = insertFirSchema.extend({
  witnesses: z.string().optional(),
  victims: z.string().optional(),
  suspects: z.string().optional(),
  district: z.string().optional(),
  state: z.string().optional(),
  isAnonymous: z.boolean().optional(),
  tags: z.array(z.string()).optional(),
});

// Status update validator with additional fields
export const createStatusUpdateValidator = insertStatusUpdateSchema.extend({
  notes: z.string().optional(),
  isPublic: z.boolean().optional(),
});

// Evidence upload validator
export const createEvidenceValidator = insertEvidenceSchema.omit({
  fileUrl: true, // This will be generated by the server
}).extend({
  file: z.any(), // This will be the actual file uploaded
  description: z.string().min(1, "Please provide a description"),
});

// Search params validator
export const searchParamsValidator = z.object({
  query: z.string().optional(),
  status: z.string().optional(),
  priority: z.number().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  location: z.string().optional(),
  ipcSection: z.string().optional(),
  tags: z.array(z.string()).optional(),
  page: z.number().optional(),
  limit: z.number().optional(),
});

// Notification settings validator
export const notificationSettingsValidator = z.object({
  emailNotifications: z.boolean(),
  smsNotifications: z.boolean(),
  pushNotifications: z.boolean(),
  statusUpdates: z.boolean(),
  assignmentChanges: z.boolean(),
  evidenceUploads: z.boolean(),
});

// Dashboard filter validator
export const dashboardFilterValidator = z.object({
  timeRange: z.enum(["day", "week", "month", "year", "custom"]),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  crimeTypes: z.array(z.string()).optional(),
  status: z.array(z.string()).optional(),
  district: z.array(z.string()).optional(),
});